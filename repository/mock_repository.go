// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	entity "dev/master/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Connect mocks base method.
func (m *MockRepository) Connect(source string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockRepositoryMockRecorder) Connect(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRepository)(nil).Connect), source)
}

// CreateCountry mocks base method.
func (m *MockRepository) CreateCountry(ctx context.Context, country entity.Country) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", ctx, country)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockRepositoryMockRecorder) CreateCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockRepository)(nil).CreateCountry), ctx, country)
}

// CreateProxy mocks base method.
func (m *MockRepository) CreateProxy(ctx context.Context, proxy entity.Proxy) (*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProxy", ctx, proxy)
	ret0, _ := ret[0].(*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProxy indicates an expected call of CreateProxy.
func (mr *MockRepositoryMockRecorder) CreateProxy(ctx, proxy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxy", reflect.TypeOf((*MockRepository)(nil).CreateProxy), ctx, proxy)
}

// CreateSubscription mocks base method.
func (m *MockRepository) CreateSubscription(ctx context.Context, subscription entity.Subscription) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockRepositoryMockRecorder) CreateSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockRepository)(nil).CreateSubscription), ctx, subscription)
}

// CreateTrialSubscription mocks base method.
func (m *MockRepository) CreateTrialSubscription(ctx context.Context, subscription entity.Subscription) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrialSubscription", ctx, subscription)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrialSubscription indicates an expected call of CreateTrialSubscription.
func (mr *MockRepositoryMockRecorder) CreateTrialSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrialSubscription", reflect.TypeOf((*MockRepository)(nil).CreateTrialSubscription), ctx, subscription)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// FindActiveUsersKeys mocks base method.
func (m *MockRepository) FindActiveUsersKeys(ctx context.Context, userId int64) (map[string]*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveUsersKeys", ctx, userId)
	ret0, _ := ret[0].(map[string]*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveUsersKeys indicates an expected call of FindActiveUsersKeys.
func (mr *MockRepositoryMockRecorder) FindActiveUsersKeys(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveUsersKeys", reflect.TypeOf((*MockRepository)(nil).FindActiveUsersKeys), ctx, userId)
}

// FindCountryByName mocks base method.
func (m *MockRepository) FindCountryByName(ctx context.Context, name string) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCountryByName", ctx, name)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCountryByName indicates an expected call of FindCountryByName.
func (mr *MockRepositoryMockRecorder) FindCountryByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCountryByName", reflect.TypeOf((*MockRepository)(nil).FindCountryByName), ctx, name)
}

// FindSubscriptions mocks base method.
func (m *MockRepository) FindSubscriptions(ctx context.Context, userId, countryId int64, active bool) ([]*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptions", ctx, userId, countryId, active)
	ret0, _ := ret[0].([]*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptions indicates an expected call of FindSubscriptions.
func (mr *MockRepositoryMockRecorder) FindSubscriptions(ctx, userId, countryId, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptions", reflect.TypeOf((*MockRepository)(nil).FindSubscriptions), ctx, userId, countryId, active)
}

// FindUserById mocks base method.
func (m *MockRepository) FindUserById(ctx context.Context, userId int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockRepositoryMockRecorder) FindUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockRepository)(nil).FindUserById), ctx, userId)
}

// GetAllCountries mocks base method.
func (m *MockRepository) GetAllCountries(ctx context.Context) ([]*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCountries", ctx)
	ret0, _ := ret[0].([]*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCountries indicates an expected call of GetAllCountries.
func (mr *MockRepositoryMockRecorder) GetAllCountries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCountries", reflect.TypeOf((*MockRepository)(nil).GetAllCountries), ctx)
}

// GetAllProxies mocks base method.
func (m *MockRepository) GetAllProxies(ctx context.Context) ([]*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProxies", ctx)
	ret0, _ := ret[0].([]*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProxies indicates an expected call of GetAllProxies.
func (mr *MockRepositoryMockRecorder) GetAllProxies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProxies", reflect.TypeOf((*MockRepository)(nil).GetAllProxies), ctx)
}

// GetKeyBySubscription mocks base method.
func (m *MockRepository) GetKeyBySubscription(ctx context.Context, subscriptionId int64) (*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyBySubscription", ctx, subscriptionId)
	ret0, _ := ret[0].(*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyBySubscription indicates an expected call of GetKeyBySubscription.
func (mr *MockRepositoryMockRecorder) GetKeyBySubscription(ctx, subscriptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyBySubscription", reflect.TypeOf((*MockRepository)(nil).GetKeyBySubscription), ctx, subscriptionId)
}

// GetRandomProxyByCountry mocks base method.
func (m *MockRepository) GetRandomProxyByCountry(ctx context.Context, country_id int64) (*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomProxyByCountry", ctx, country_id)
	ret0, _ := ret[0].(*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomProxyByCountry indicates an expected call of GetRandomProxyByCountry.
func (mr *MockRepositoryMockRecorder) GetRandomProxyByCountry(ctx, country_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomProxyByCountry", reflect.TypeOf((*MockRepository)(nil).GetRandomProxyByCountry), ctx, country_id)
}

// Initialize mocks base method.
func (m *MockRepository) Initialize(schemePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", schemePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockRepositoryMockRecorder) Initialize(schemePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRepository)(nil).Initialize), schemePath)
}

// InsertKey mocks base method.
func (m *MockRepository) InsertKey(ctx context.Context, key entity.Key) (*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKey", ctx, key)
	ret0, _ := ret[0].(*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKey indicates an expected call of InsertKey.
func (mr *MockRepositoryMockRecorder) InsertKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKey", reflect.TypeOf((*MockRepository)(nil).InsertKey), ctx, key)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), ctx, user)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// FindUserById mocks base method.
func (m *MockUserRepository) FindUserById(ctx context.Context, userId int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserRepositoryMockRecorder) FindUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserRepository)(nil).FindUserById), ctx, userId)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockKeyRepository is a mock of KeyRepository interface.
type MockKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepositoryMockRecorder
}

// MockKeyRepositoryMockRecorder is the mock recorder for MockKeyRepository.
type MockKeyRepositoryMockRecorder struct {
	mock *MockKeyRepository
}

// NewMockKeyRepository creates a new mock instance.
func NewMockKeyRepository(ctrl *gomock.Controller) *MockKeyRepository {
	mock := &MockKeyRepository{ctrl: ctrl}
	mock.recorder = &MockKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepository) EXPECT() *MockKeyRepositoryMockRecorder {
	return m.recorder
}

// FindActiveUsersKeys mocks base method.
func (m *MockKeyRepository) FindActiveUsersKeys(ctx context.Context, userId int64) (map[string]*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveUsersKeys", ctx, userId)
	ret0, _ := ret[0].(map[string]*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveUsersKeys indicates an expected call of FindActiveUsersKeys.
func (mr *MockKeyRepositoryMockRecorder) FindActiveUsersKeys(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveUsersKeys", reflect.TypeOf((*MockKeyRepository)(nil).FindActiveUsersKeys), ctx, userId)
}

// GetKeyBySubscription mocks base method.
func (m *MockKeyRepository) GetKeyBySubscription(ctx context.Context, subscriptionId int64) (*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyBySubscription", ctx, subscriptionId)
	ret0, _ := ret[0].(*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyBySubscription indicates an expected call of GetKeyBySubscription.
func (mr *MockKeyRepositoryMockRecorder) GetKeyBySubscription(ctx, subscriptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyBySubscription", reflect.TypeOf((*MockKeyRepository)(nil).GetKeyBySubscription), ctx, subscriptionId)
}

// InsertKey mocks base method.
func (m *MockKeyRepository) InsertKey(ctx context.Context, key entity.Key) (*entity.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKey", ctx, key)
	ret0, _ := ret[0].(*entity.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKey indicates an expected call of InsertKey.
func (mr *MockKeyRepositoryMockRecorder) InsertKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKey", reflect.TypeOf((*MockKeyRepository)(nil).InsertKey), ctx, key)
}

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockCountryRepository) CreateCountry(ctx context.Context, country entity.Country) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", ctx, country)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockCountryRepositoryMockRecorder) CreateCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockCountryRepository)(nil).CreateCountry), ctx, country)
}

// FindCountryByName mocks base method.
func (m *MockCountryRepository) FindCountryByName(ctx context.Context, name string) (*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCountryByName", ctx, name)
	ret0, _ := ret[0].(*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCountryByName indicates an expected call of FindCountryByName.
func (mr *MockCountryRepositoryMockRecorder) FindCountryByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCountryByName", reflect.TypeOf((*MockCountryRepository)(nil).FindCountryByName), ctx, name)
}

// GetAllCountries mocks base method.
func (m *MockCountryRepository) GetAllCountries(ctx context.Context) ([]*entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCountries", ctx)
	ret0, _ := ret[0].([]*entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCountries indicates an expected call of GetAllCountries.
func (mr *MockCountryRepositoryMockRecorder) GetAllCountries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCountries", reflect.TypeOf((*MockCountryRepository)(nil).GetAllCountries), ctx)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(ctx context.Context, subscription entity.Subscription) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), ctx, subscription)
}

// CreateTrialSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateTrialSubscription(ctx context.Context, subscription entity.Subscription) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrialSubscription", ctx, subscription)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrialSubscription indicates an expected call of CreateTrialSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateTrialSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrialSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateTrialSubscription), ctx, subscription)
}

// FindSubscriptions mocks base method.
func (m *MockSubscriptionRepository) FindSubscriptions(ctx context.Context, userId, countryId int64, active bool) ([]*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriptions", ctx, userId, countryId, active)
	ret0, _ := ret[0].([]*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriptions indicates an expected call of FindSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) FindSubscriptions(ctx, userId, countryId, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindSubscriptions), ctx, userId, countryId, active)
}

// MockProxyRepository is a mock of ProxyRepository interface.
type MockProxyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProxyRepositoryMockRecorder
}

// MockProxyRepositoryMockRecorder is the mock recorder for MockProxyRepository.
type MockProxyRepositoryMockRecorder struct {
	mock *MockProxyRepository
}

// NewMockProxyRepository creates a new mock instance.
func NewMockProxyRepository(ctrl *gomock.Controller) *MockProxyRepository {
	mock := &MockProxyRepository{ctrl: ctrl}
	mock.recorder = &MockProxyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyRepository) EXPECT() *MockProxyRepositoryMockRecorder {
	return m.recorder
}

// CreateProxy mocks base method.
func (m *MockProxyRepository) CreateProxy(ctx context.Context, proxy entity.Proxy) (*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProxy", ctx, proxy)
	ret0, _ := ret[0].(*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProxy indicates an expected call of CreateProxy.
func (mr *MockProxyRepositoryMockRecorder) CreateProxy(ctx, proxy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProxy", reflect.TypeOf((*MockProxyRepository)(nil).CreateProxy), ctx, proxy)
}

// GetAllProxies mocks base method.
func (m *MockProxyRepository) GetAllProxies(ctx context.Context) ([]*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProxies", ctx)
	ret0, _ := ret[0].([]*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProxies indicates an expected call of GetAllProxies.
func (mr *MockProxyRepositoryMockRecorder) GetAllProxies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProxies", reflect.TypeOf((*MockProxyRepository)(nil).GetAllProxies), ctx)
}

// GetRandomProxyByCountry mocks base method.
func (m *MockProxyRepository) GetRandomProxyByCountry(ctx context.Context, country_id int64) (*entity.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomProxyByCountry", ctx, country_id)
	ret0, _ := ret[0].(*entity.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomProxyByCountry indicates an expected call of GetRandomProxyByCountry.
func (mr *MockProxyRepositoryMockRecorder) GetRandomProxyByCountry(ctx, country_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomProxyByCountry", reflect.TypeOf((*MockProxyRepository)(nil).GetRandomProxyByCountry), ctx, country_id)
}
